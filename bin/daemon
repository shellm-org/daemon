#!/bin/bash

## \brief wrapper for daemon (see lib/core/daemon)
## \require coreutils

## \desc Start and stop daemons written with core/daemon/* libraries.

## \example dae start reencode
## Start the daemon called reencode.
## You can then stop it with `stop reencode` or kill it with `kill reencode`.
## \example dae alias D1 "kill reencode" "start normalize"
## Define an alias called D1 which will kill reencode daemon
## then start normalize daemon when called.
## \example dae runalias D1
## Call the D1 alias and run its commands.

shellm-include core/shellman.sh
shellm-include core/format.sh
shellm-include core/init/data.sh
shellm-include flow/loop.sh

[ $# -eq 0 ] && usage

data_dir=$(init_data)

dae_start() {
  local pid daemon="$1"
  shift
  "${daemon}" "$@" & pid=$!
  echo "${daemon} ${pid}" >> "${data_dir}/running"
}

dae_stop() {
  local daemon="$1"
  if loop stop "${daemon}"; then
    sed -i "s/${daemon} /d" "${data_dir}/running"
  fi
}

dae_kill() {
  local pid daemon="$1"
  pid=$(grep "${daemon} " "${data_dir}/running")
  if [ -n "${pid}" ]; then
    kill -"${2:-TERM}" "${pid}"
    sed -i "s/${daemon} /d" "${data_dir}/running"
  fi
}

dae_register() {
  local daemon
  for daemon; do
    if ! grep "^${daemon}$" "${data_dir}/registered"; then
      echo "${daemon}" >> "${data_dir}/registered"
    fi
  done
}

dae_unregister() {
  local daemon grep_opt=""
  for daemon; do
    grep_opt="${grep_opt} -e ${daemon}"
  done
  # shellcheck disable=SC2086
  filtered="$(grep -v ${grep_opt} "${data_dir}/registered")"
  echo "${filtered}" > "${data_dir}/registered"
}

dae_startall() {
  local daemon
  while read -r daemon; do
    dae_start "${daemon}" "$@"
  done < "${data_dir}/registered"
}

dae_stopall() {
  local daemon
  while read -r daemon; do
    dae_stop "${daemon}"
  done < "${data_dir}/registered"
}

dae_killall() {
  local daemon
  while read -r daemon; do
    dae_kill "${daemon}" "${1:-TERM}"
  done < "${data_dir}/registered"
}

main() {
  case "$1" in
    ## \option start DAEMON [ARGS...]
    ## Start a daemon.
    start)
      [ ! -n "$2" ] && usage
      shift
      dae_start "$@"
    ;;
    ## \option stop DAEMON
    ## Stop a daemon (will wait for its current execution to finish).
    stop)
      [ ! -n "$2" ] && usage
      dae_stop "$2"
    ;;
    ## \option kill DAEMON [SIGNAL]
    ## Immediatly terminate a daemon (will send a TERM signal by default).
    ## The SIGNAL argument will be fed to `kill`.
    kill)
      [ ! -n "$2" ] && usage
      shift
      dae_kill "$@"
    ;;
    ## \option register DAEMONS
    ## Remember these daemons to work with `all` options.
    register)
      [ ! -n "$2" ] && usage
      shift
      dae_register "$@"
    ;;
    ## \option unregister DAEMONS
    ## Forget these daemons. They wont work with `all` options anymore.
    unregister)
      [ ! -n "$2" ] && usage
      shift
      dae_unregister "$@"
    ;;
    ## \option startall [ARGS...]
    ## Start all daemons, with optional ARGS.
    startall)
      shift
      dae_startall "$@"
    ;;
    ## \option stopall Stop all daemons.
    stopall) dae_stopall ;;
    ## \option killall [SIGNAL]
    ## Kill all daemons with SIGNAL (default to TERM).
    killall)
      shift
      dae_killall "$@"
    ;;
    ## \option alias NAME [COMMANDS...]
    ## If COMMANDS are given, define a new alias named after NAME.
    ## If no COMMANDS are given, print the contents of alias NAME.
    alias) ;;
    ## \option runalias NAME
    ## Run the commands in alias defined by NAME.
    runalias) ;;
    ## \option help, -h, --help
    ## Prints this help and exit.
    -h|--help|help) shellman "$0"; exit 0 ;;
  esac
}

## \usage shellm-daemon start|stop|kill DAEMONS
## \usage shellm-daemon [un]register DAEMONS
## \usage shellm-daemon startall|stopall|killall
## \usage shellm-daemon alias NAME [COMMANDS...]
## \usage shellm-daemon runalias NAME
main "$@"
